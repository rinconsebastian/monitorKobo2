// <auto-generated />
using System;
using App_consulta.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace App_consulta.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220701203115_clean")]
    partial class clean
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("App_consulta.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "97f6ff5b-6816-44fc-8e6f-bbdedd1223f9",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        });
                });

            modelBuilder.Entity("App_consulta.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IDDependencia")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Apellido = "",
                            ConcurrencyStamp = "05622443-5cfd-4389-8879-4523ac4c5aee",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            IDDependencia = 1,
                            LockoutEnabled = false,
                            Nombre = "Admin",
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECPDxHYYnrFlyL6ghv6NFqs7g9ZlRCuHRIgzChzRa5GDZpnwsj563VfwncgzZt+OTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NNK44MKHKTBOV6DHXJ4BT2Q3SYO3WQC2",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("App_consulta.Models.Configuracion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CodeEncuestador")
                        .HasColumnType("int");

                    b.Property<string>("ColorPrincipal")
                        .HasColumnType("longtext");

                    b.Property<string>("ColorTextoHeader")
                        .HasColumnType("longtext");

                    b.Property<string>("ColorTextoPrincipal")
                        .HasColumnType("longtext");

                    b.Property<string>("Contacto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DescripcionApp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Entidad")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Favicon")
                        .HasColumnType("longtext");

                    b.Property<string>("ImgHeader")
                        .HasColumnType("longtext");

                    b.Property<string>("Logo")
                        .HasColumnType("longtext");

                    b.Property<string>("NombreApp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NombrePlan")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Configuracion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodeEncuestador = 0,
                            ColorPrincipal = "#4287F5",
                            ColorTextoHeader = "#FFFFFF",
                            ColorTextoPrincipal = "#0448B5",
                            Contacto = "rinconsebastian@gmail.com",
                            DescripcionApp = "Acuerdo AUNAP - PNUD 2022",
                            Entidad = "PNUD-AUNAP",
                            Favicon = "/images/favicon.png",
                            Logo = "/images/favicon1.png",
                            NombreApp = "App Consulta",
                            NombrePlan = "Coordinación"
                        });
                });

            modelBuilder.Entity("App_consulta.Models.KoField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Editable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FormGroup")
                        .HasColumnType("longtext");

                    b.Property<string>("FormGroupSelect")
                        .HasColumnType("longtext");

                    b.Property<string>("FormLabel")
                        .HasColumnType("longtext");

                    b.Property<int?>("FormOrder")
                        .HasColumnType("int");

                    b.Property<int>("FormType")
                        .HasColumnType("int");

                    b.Property<int>("IdProject")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameDB")
                        .HasColumnType("longtext");

                    b.Property<string>("NameKobo")
                        .HasColumnType("longtext");

                    b.Property<string>("PrintTitle")
                        .HasColumnType("longtext");

                    b.Property<bool>("ShowForm")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowPrint")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowTableReport")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowTableUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowTableValidation")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("TableOrder")
                        .HasColumnType("int");

                    b.Property<int?>("TablePriority")
                        .HasColumnType("int");

                    b.Property<string>("TableTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("TableType")
                        .HasColumnType("longtext");

                    b.Property<bool>("Validable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("WidthTableReport")
                        .HasColumnType("int");

                    b.Property<int?>("WidthTableUser")
                        .HasColumnType("int");

                    b.Property<int?>("WidthTableValidation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdProject");

                    b.ToTable("KoField");
                });

            modelBuilder.Entity("App_consulta.Models.KoProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Collection")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("KoboApiToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("KoboAssetUid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("KoboAttachment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("KoboKpiUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("KoboUsername")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Validable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ValidationField")
                        .HasColumnType("longtext");

                    b.Property<string>("ValidationName")
                        .HasColumnType("longtext");

                    b.Property<string>("ValidationValue")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("KoProject");
                });

            modelBuilder.Entity("App_consulta.Models.KoState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("KoDataState");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Class = "",
                            Label = "NO"
                        },
                        new
                        {
                            Id = 2,
                            Class = "",
                            Label = "Pendiente"
                        },
                        new
                        {
                            Id = 3,
                            Class = "bg-warning",
                            Label = "Borrador"
                        },
                        new
                        {
                            Id = 4,
                            Class = "bg-success",
                            Label = "Completo"
                        },
                        new
                        {
                            Id = 5,
                            Class = "bg-danger",
                            Label = "Cancelado"
                        },
                        new
                        {
                            Id = 6,
                            Class = "bg-info",
                            Label = "Impreso"
                        },
                        new
                        {
                            Id = 7,
                            Class = "bg-danger",
                            Label = "Carné vigente"
                        },
                        new
                        {
                            Id = 8,
                            Class = "bg-danger",
                            Label = "Duplicado"
                        });
                });

            modelBuilder.Entity("App_consulta.Models.KoVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("KoVariable");
                });

            modelBuilder.Entity("App_consulta.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Code2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IdLevel")
                        .HasColumnType("int");

                    b.Property<int?>("IdParent")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdLevel");

                    b.HasIndex("IdParent");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("App_consulta.Models.LocationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("LocationLevel");
                });

            modelBuilder.Entity("App_consulta.Models.LogModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Accion")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Modelo")
                        .HasColumnType("longtext");

                    b.Property<string>("Usuario")
                        .HasColumnType("longtext");

                    b.Property<string>("ValAnterior")
                        .HasColumnType("longtext");

                    b.Property<string>("ValNuevo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("App_consulta.Models.Policy", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("claim")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("group")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Policy");

                    b.HasData(
                        new
                        {
                            id = 1,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Configuracion.General",
                            group = 1,
                            nombre = "Ver Configuración general"
                        },
                        new
                        {
                            id = 2,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Configuracion.Responsable",
                            group = 1,
                            nombre = "Configuración dependencia"
                        },
                        new
                        {
                            id = 3,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Responsable.Editar",
                            group = 2,
                            nombre = "Editar dependencias"
                        },
                        new
                        {
                            id = 4,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Rol.Editar",
                            group = 2,
                            nombre = "Editar roles"
                        },
                        new
                        {
                            id = 5,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Usuario.Editar",
                            group = 2,
                            nombre = "Editar usuarios"
                        },
                        new
                        {
                            id = 6,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Configuracion.Logs",
                            group = 2,
                            nombre = "Ver registro actividad"
                        },
                        new
                        {
                            id = 8,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Encuestador.Ver",
                            group = 3,
                            nombre = "Ver encuestador"
                        },
                        new
                        {
                            id = 7,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Encuestador.Editar",
                            group = 3,
                            nombre = "Editar encuestador"
                        },
                        new
                        {
                            id = 9,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Encuestador.Administrar",
                            group = 3,
                            nombre = "Administrar encuestador"
                        },
                        new
                        {
                            id = 10,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Encuestas.Actualizar",
                            group = 4,
                            nombre = "Actualizar encuestas"
                        },
                        new
                        {
                            id = 11,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Encuestas.Listado",
                            group = 4,
                            nombre = "Informe encuestas"
                        },
                        new
                        {
                            id = 16,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Encuestas.Usuario",
                            group = 4,
                            nombre = "Ver encuestas por usuario"
                        },
                        new
                        {
                            id = 12,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Registro.Ver",
                            group = 5,
                            nombre = "Ver registro"
                        },
                        new
                        {
                            id = 13,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Registro.Editar",
                            group = 5,
                            nombre = "Editar registro"
                        },
                        new
                        {
                            id = 14,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Registro.Validar",
                            group = 5,
                            nombre = "Validar registro"
                        },
                        new
                        {
                            id = 15,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Registro.Listado",
                            group = 5,
                            nombre = "Informe registro"
                        },
                        new
                        {
                            id = 17,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Registro.Imprimir",
                            group = 5,
                            nombre = "Imprimir registro"
                        },
                        new
                        {
                            id = 23,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Registro.Cancelar",
                            group = 5,
                            nombre = "Carcelar registro"
                        },
                        new
                        {
                            id = 18,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Exportar.Listado",
                            group = 6,
                            nombre = "Exportar listados"
                        },
                        new
                        {
                            id = 19,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Registro.Imagen.Cambiar",
                            group = 5,
                            nombre = "Cambiar imagenes registro"
                        },
                        new
                        {
                            id = 20,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Registro.Imagen.Restablecer",
                            group = 5,
                            nombre = "Restablecer imagenes registro"
                        },
                        new
                        {
                            id = 21,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Solicitud.Crear",
                            group = 7,
                            nombre = "Crear solicitudes"
                        },
                        new
                        {
                            id = 22,
                            claim = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Solicitud.Administrar",
                            group = 7,
                            nombre = "Administrar solicitudes"
                        });
                });

            modelBuilder.Entity("App_consulta.Models.Pollster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<int>("IdLocation")
                        .HasColumnType("int");

                    b.Property<int>("IdResponsable")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DNI")
                        .IsUnique();

                    b.HasIndex("IdLocation");

                    b.HasIndex("IdResponsable");

                    b.HasIndex("IdUser");

                    b.ToTable("Pollster");
                });

            modelBuilder.Entity("App_consulta.Models.RequestUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdminName")
                        .HasColumnType("longtext");

                    b.Property<bool>("AlertAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AlertUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("File")
                        .HasColumnType("longtext");

                    b.Property<string>("IdUser")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RecordNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Request")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Response")
                        .HasColumnType("longtext");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidationDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("RequestUser");
                });

            modelBuilder.Entity("App_consulta.Models.Responsable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("IdJefe")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdJefe");

                    b.ToTable("Responsable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Entidad"
                        },
                        new
                        {
                            Id = 2,
                            IdJefe = 1,
                            Nombre = "[CDR] Coordinación"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Configuracion.General",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Configuracion.Responsable",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Responsable.Editar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Rol.Editar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Usuario.Editar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Configuracion.Logs",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Encuestador.Ver",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Encuestador.Editar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Encuestador.Administrar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Encuestas.Actualizar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Encuestas.Listado",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Encuestas.Usuario",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Registro.Ver",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Registro.Editar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Registro.Validar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Registro.Listado",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Registro.Imprimir",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Exportar.Listado",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Registro.Imagen.Cambiar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Registro.Imagen.Restablecer",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Solicitud.Crear",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Solicitud.Administrar",
                            ClaimValue = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/Registro.Imprimir",
                            ClaimValue = "1",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("App_consulta.Models.KoField", b =>
                {
                    b.HasOne("App_consulta.Models.KoProject", "Project")
                        .WithMany()
                        .HasForeignKey("IdProject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("App_consulta.Models.Location", b =>
                {
                    b.HasOne("App_consulta.Models.LocationLevel", "LocationLevel")
                        .WithMany()
                        .HasForeignKey("IdLevel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App_consulta.Models.Location", "LocationParent")
                        .WithMany()
                        .HasForeignKey("IdParent");

                    b.Navigation("LocationLevel");

                    b.Navigation("LocationParent");
                });

            modelBuilder.Entity("App_consulta.Models.Pollster", b =>
                {
                    b.HasOne("App_consulta.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("IdLocation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App_consulta.Models.Responsable", "Responsable")
                        .WithMany()
                        .HasForeignKey("IdResponsable")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App_consulta.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("IdUser");

                    b.Navigation("Location");

                    b.Navigation("Responsable");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App_consulta.Models.Responsable", b =>
                {
                    b.HasOne("App_consulta.Models.Responsable", "ResponsableJefe")
                        .WithMany("Hijos")
                        .HasForeignKey("IdJefe");

                    b.Navigation("ResponsableJefe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("App_consulta.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("App_consulta.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("App_consulta.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("App_consulta.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App_consulta.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("App_consulta.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App_consulta.Models.Responsable", b =>
                {
                    b.Navigation("Hijos");
                });
#pragma warning restore 612, 618
        }
    }
}
